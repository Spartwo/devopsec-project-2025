name: Ruby Rails Test, Build, & Deploy

on:
  push:
    branches: [ "main", "deploy" ]
  pull_request:
    branches: [ "main", "deploy" ]

jobs:
  build-and-test-server:
    runs-on: ubuntu-latest
    steps:
      - name: Debug Workflow
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Branch ref: ${{ github.ref }}"
          echo "Repository: ${{ github.repository }}"
          
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.5
          
      - name: Install Dependencies
        run: |
          cd highscores-api || { echo "directory 'highscores-api' not found!"; exit 1; }
          gem install bundler
          bundle config set frozen false
          bundle install
          
      - name: Run Tests
        run: |
          cd highscores-api
          bundle exec rails test || bundle exec rspec
   
  deploy:
    needs: build-and-test-server
    runs-on: ubuntu-latest
    # Temporarily remove the condition to force the deploy job to run
    # if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy')
    steps:
      - name: Debug Deploy Job
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Branch ref: ${{ github.ref }}"
          echo "Repository: ${{ github.repository }}"
          
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/github_actions_key
            chmod 600 ~/.ssh/github_actions_key
            ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Increase SSH timeout
        run: |
          echo "ServerAliveInterval 60" >> ~/.ssh/config
          echo "ServerAliveCountMax 120" >> ~/.ssh/config
          
      - name: Deploy to EC2
        env:
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
        run: |
          ssh -i ~/.ssh/github_actions_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
            # Create a deployment log
            DEPLOY_LOG="/tmp/deploy-$(date +%Y%m%d-%H%M%S).log"
            exec > >(tee -a "$DEPLOY_LOG") 2>&1
            
            echo "=== Starting deployment at $(date) ==="
            
            # Function to log steps with timestamps
            log() {
              echo "[$(date +%Y-%m-%d\ %H:%M:%S)] $1"
            }
            
            # Function to check command status
            check_status() {
              if [ $? -eq 0 ]; then
                log "✅ $1 completed successfully"
              else
                log "❌ $1 failed with exit code $?"
                if [ "$2" = "critical" ]; then
                  log "Critical step failed, aborting deployment"
                  exit 1
                fi
              fi
            }
            
            # Setup app directory
            log "Setting up application directory"
            mkdir -p ~/app
            cd ~/app
            check_status "Directory setup"
            
            # Ensure the repository exists, or clone it
            if [ -d "Project-2025" ]; then
              log "Repository exists, updating..."
              cd Project-2025
              git fetch
              git reset --hard origin/main
            else
              log "Repository doesn't exist, cloning..."
              git clone https://github.com/Team9NCI/Project-2025.git
              cd Project-2025
            fi
            check_status "Repository update" "critical"
            
            # Navigate to the highscores-api directory
            cd highscores-api
            log "Current directory: $(pwd)"
            
            # Install system dependencies
            log "Installing system dependencies..."
            sudo apt update -y
            check_status "apt update"
            
            # Install required packages in batches to avoid timeout issues
            log "Installing essential build packages..."
            sudo apt install -y build-essential git curl libssl-dev libreadline-dev
            check_status "Essential packages installation"
            
            log "Installing database packages..."
            sudo apt install -y zlib1g-dev sqlite3 libsqlite3-dev
            check_status "Database packages installation"
            
            log "Installing additional development packages..."
            sudo apt install -y autoconf bison libyaml-dev libgdbm-dev libncurses5-dev automake libtool
            check_status "Additional dev packages installation"
            
            log "Installing web packages..."
            sudo apt install -y libffi-dev nodejs npm libxml2-dev libxslt1-dev
            check_status "Web packages installation"
            
            # Check Ruby installation
            log "Setting up Ruby environment..."
            source ~/.rvm/scripts/rvm || log "RVM not found, will attempt to install"
            
            if ! command -v rvm &> /dev/null; then
              log "Installing RVM..."
              gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
              curl -sSL https://get.rvm.io | bash -s stable
              source ~/.rvm/scripts/rvm
            fi
            check_status "RVM setup"
            
            rvm get stable --auto-dotfiles || true
            rvm reload
            
            # Check if Ruby 3.3.5 is already installed
            if ! rvm list | grep -q '3.3.5'; then
              log "Ruby 3.3.5 not found. Installing it..."
              rvm install 3.3.5
            else
              log "Ruby 3.3.5 is already installed."
            fi
            check_status "Ruby installation" "critical"
            
            # Use Ruby 3.3.5 and set as default
            rvm use 3.3.5 --default
            log "Using Ruby $(ruby -v)"
            
            # Set the master key
            log "Setting up master key..."
            mkdir -p config
            echo "${RAILS_MASTER_KEY}" > config/master.key
            chmod 600 config/master.key
            check_status "Master key setup" "critical"
            
            # Create needed directories
            log "Creating application directories..."
            mkdir -p db log tmp/pids storage /var/log/highscores-api
            chmod -R 755 .
            check_status "Directory creation"
            
            # Make startup script executable
            log "Setting up startup script..."
            chmod +x scripts/start_server.sh
            check_status "Startup script setup" "critical"
            
            # Install gems
            log "Installing project dependencies..."
            gem install bundler
            check_status "Bundler installation"
            
            log "Running bundle install..."
            bundle config set --local without 'development test'
            bundle config set frozen false
            bundle install --jobs=4 --retry=3 || (log "Bundle install failed, trying again..." && bundle install --force)
            check_status "Bundle installation" "critical"
            
            # Precompile assets
            log "Precompiling assets..."
            RAILS_ENV=production bundle exec rake assets:precompile || log "Asset precompilation failed, but continuing..."
            
            # Run migrations
            log "Running database migrations..."
            RAILS_ENV=production bundle exec rails db:migrate || log "Migration failed, but continuing..."
            
            # Set up nginx
            log "Setting up nginx..."
            sudo apt install -y nginx
            check_status "Nginx installation"
            
            log "Configuring nginx..."
            sudo cp config/nginx/highscores-api.conf /etc/nginx/sites-available/
            sudo ln -sf /etc/nginx/sites-available/highscores-api.conf /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            
            # Test nginx configuration
            log "Testing nginx configuration..."
            sudo nginx -t
            check_status "Nginx configuration test" "critical"
            
            log "Restarting nginx..."
            sudo systemctl restart nginx
            check_status "Nginx restart"
            
            # Create systemd service
            log "Setting up systemd service..."
            sudo cp config/systemd/highscores-api.service /etc/systemd/system/
            check_status "Systemd service setup"
            
            # Create log files
            log "Setting up log files..."
            sudo mkdir -p /var/log/highscores-api
            sudo touch /var/log/highscores-api/application.log
            sudo touch /var/log/highscores-api/error.log
            sudo chown -R $USER:$USER /var/log/highscores-api
            check_status "Log files setup"
            
            # Reload systemd
            log "Reloading systemd..."
            sudo systemctl daemon-reload
            check_status "Systemd reload"
            
            # Enable and start the service
            log "Enabling service..."
            sudo systemctl enable highscores-api
            check_status "Service enable"
            
            log "Starting service..."
            sudo systemctl restart highscores-api
            check_status "Service restart"
            
            # Wait for service to start
            log "Waiting for service to start..."
            sleep 10
            
            # Check service status
            log "Checking service status..."
            sudo systemctl status highscores-api || true
            
            # Verify the application is responding
            log "Verifying application health..."
            curl -s -o /dev/null -w "%{http_code}" http://localhost/up
            check_status "Application health check"
            
            # Check for common errors in logs
            log "Checking for errors in logs..."
            grep -i "error\|exception\|fail" /var/log/highscores-api/error.log || echo "No obvious errors found in logs"
            
            # if service fails, try direct start
            if ! sudo systemctl is-active --quiet highscores-api; then
              log "Service failed to start, trying manual start..."
              cd $PWD
              source ~/.rvm/scripts/rvm
              rvm use 3.3.5
              RAILS_ENV=production RAILS_MASTER_KEY=${RAILS_MASTER_KEY} nohup bundle exec rails server -p 3000 -b 0.0.0.0 > ~/rails.log 2>&1 &
              log "Server started in background"
            fi
            
            log "=== Deployment completed at $(date) ==="
            
            # Copy deployment log to a permanent location
            cp "$DEPLOY_LOG" ~/deployment-logs-$(date +%Y%m%d-%H%M%S).log
          ENDSSH

      - name: Verify Deployment
        run: |
          echo "Waiting for application to fully start..."
          sleep 30
          
          echo "Checking application health..."
          curl -s -o /dev/null -w "Health check status: %{http_code}\n" http://${{ secrets.EC2_HOST }}/up || echo "Health check failed"
          
          echo "Testing API endpoint..."
          curl -s -o /dev/null -w "API endpoint status: %{http_code}\n" http://${{ secrets.EC2_HOST }}/high_scores/top?game=solitaire&limit=5 || echo "API endpoint test failed"
