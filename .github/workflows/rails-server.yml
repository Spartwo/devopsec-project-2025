name: Production Deployment - Final Fix

on:
  push:
    branches: [main]

env:
  RAILS_ENV: production
  RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.5
          bundler-cache: true
          working-directory: ./highscores-api

      - name: Run Tests
        working-directory: ./highscores-api
        run: |
          mkdir -p storage
          touch storage/test.sqlite3
          RAILS_ENV=test bundle exec rails db:create db:migrate
          bundle exec rspec

  deploy:
    needs: [build-and-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/github_actions
          chmod 600 ~/.ssh/github_actions
          ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
        run: |
          ssh -i ~/.ssh/github_actions ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "RAILS_MASTER_KEY='$RAILS_MASTER_KEY' bash -s" << 'ENDSSH'
            # Safe execution with controlled error handling
            set -eo pipefail
            APP_DIR="$HOME/app/Project-2025/highscores-api"

            # Clean existing deployment
            if [ -d "$APP_DIR" ]; then
              cd "$APP_DIR"
              git reset --hard HEAD
              git clean -fd
              git pull origin main
            else
              git clone https://github.com/Team9NCI/Project-2025.git "$APP_DIR"
            fi

            # Install system dependencies
            sudo apt-get update -y
            sudo apt-get install -y \
              build-essential \
              sqlite3 \
              libsqlite3-dev \
              nodejs \
              nginx

            # Install RVM safely in isolated environment
            export RVM_INSTALL_DIR="$HOME/.rvm"
            if [ ! -d "$RVM_INSTALL_DIR" ]; then
              (
                set +u  # Disable unbound variable check temporarily
                gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
                \curl -sSL https://get.rvm.io | \
                  bash -s stable --version 1.29.12 --path "$RVM_INSTALL_DIR" --auto-dotfiles=no --quiet-curl
              )
            fi

            # Use RVM without sourcing environment
            export PATH="$RVM_INSTALL_DIR/bin:$PATH"
            rvm autolibs disable
            rvm requirements

            # Install Ruby using direct commands
            rvm install 3.3.5 --quiet-curl --movable --rubygems ignore
            rvm use 3.3.5 --default

            # Application setup
            cd "$APP_DIR/highscores-api"
            mkdir -p storage
            touch storage/production.sqlite3
            chmod 0666 storage/production.sqlite3
            printf '%s' "$RAILS_MASTER_KEY" > config/master.key
            chmod 600 config/master.key

            # Install dependencies
            bundle config set --local without 'development test'
            bundle install --jobs=4 --retry=3

            # Database setup
            RAILS_ENV=production bundle exec rails db:create
            RAILS_ENV=production bundle exec rails db:migrate

            # Configure systemd service using direct paths
            sudo tee /etc/systemd/system/highscores-api.service > /dev/null <<EOL
            [Unit]
            Description=Highscores API
            After=network.target

            [Service]
            Type=simple
            User=$USER
            WorkingDirectory=$APP_DIR/highscores-api
            ExecStart=$RVM_INSTALL_DIR/rubies/ruby-3.3.5/bin/ruby $APP_DIR/highscores-api/bin/rails server -e production -p 3000 -b 0.0.0.0
            Restart=always
            Environment=RAILS_ENV=production
            Environment=RAILS_MASTER_KEY=$RAILS_MASTER_KEY

            [Install]
            WantedBy=multi-user.target
            EOL

            # Service management
            sudo systemctl daemon-reload
            sudo systemctl enable highscores-api
            sudo systemctl restart highscores-api

            # Configure nginx
            sudo tee /etc/nginx/sites-available/highscores-api > /dev/null <<EOL
            server {
                listen 80;
                server_name _;

                location / {
                    proxy_pass http://localhost:3000;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                }
            }
            EOL

            sudo ln -sf /etc/nginx/sites-available/highscores-api /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo nginx -t && sudo systemctl restart nginx

            # Verification
            echo "Deployment verification:"
            sleep 5
            sudo systemctl status highscores-api --no-pager
            curl -sI localhost:3000 | head -n1
            $RVM_INSTALL_DIR/rubies/ruby-3.3.5/bin/ruby -v
          ENDSSH