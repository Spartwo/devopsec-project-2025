name: Rails Production Deployment

on:
  push:
    branches: [main]

env:
  RAILS_ENV: production
  RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.5
          bundler-cache: true

      - name: Database Setup
        run: |
          cd highscores-api
          bundle install --jobs=4 --retry=3
          mkdir -p storage
          touch storage/production.sqlite3
          chmod 0666 storage/production.sqlite3
          # Run test database setup
          RAILS_ENV=test bundle exec rails db:create db:migrate

      - name: Run Tests
        run: |
          cd highscores-api
          bundle exec rspec

  deploy:
    needs: [build-and-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/github_actions
          chmod 600 ~/.ssh/github_actions
          ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
        run: |
          ssh -i ~/.ssh/github_actions ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "RAILS_MASTER_KEY='$RAILS_MASTER_KEY' bash -s" << 'ENDSSH'
            set -euo pipefail

            # Application setup
            APP_DIR="$HOME/app/Project-2025/highscores-api"
            mkdir -p "$APP_DIR/storage"
            cd "$APP_DIR"

            # Clone/update repository
            if [ -d .git ]; then
              git reset --hard HEAD
              git clean -fd
              git pull origin main
            else
              git clone https://github.com/Team9NCI/Project-2025.git .
            fi

            # Configure database.yml
            cat > config/database.yml <<EOL
            default: &default
              adapter: sqlite3
              pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
              timeout: 5000

            development:
              <<: *default
              database: storage/development.sqlite3

            test:
              <<: *default
              database: storage/test.sqlite3

            production:
              <<: *default
              database: $APP_DIR/storage/production.sqlite3
            EOL

            # Set up storage directory
            touch storage/production.sqlite3
            chmod 0666 storage/production.sqlite3
            sudo chown -R $USER:$USER storage

            # Install dependencies
            sudo apt-get update -y
            sudo apt-get install -y sqlite3 libsqlite3-dev

            # Ruby setup
            source ~/.rvm/scripts/rvm
            rvm use 3.3.5 --default
            bundle install --jobs=4 --retry=3 --without development test

            # Database setup
            RAILS_ENV=production bundle exec rails db:create
            RAILS_ENV=production bundle exec rails db:migrate --trace

            # Systemd service
            sudo tee /etc/systemd/system/highscores-api.service > /dev/null <<EOL
            [Unit]
            Description=Highscores API
            After=network.target

            [Service]
            Type=simple
            User=$USER
            WorkingDirectory=$APP_DIR
            ExecStart=$HOME/.rvm/bin/rvm 3.3.5 do bundle exec rails server -e production -p 3000 -b 0.0.0.0
            Restart=always
            Environment=RAILS_ENV=production
            Environment=RAILS_MASTER_KEY=$RAILS_MASTER_KEY
            Environment=RAILS_SERVE_STATIC_FILES=true

            [Install]
            WantedBy=multi-user.target
            EOL

            # Service management
            sudo systemctl daemon-reload
            sudo systemctl enable highscores-api
            sudo systemctl restart highscores-api

            # Nginx setup
            sudo tee /etc/nginx/sites-available/highscores-api > /dev/null <<EOL
            server {
                listen 80;
                server_name _;

                location / {
                    proxy_pass http://localhost:3000;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOL

            sudo ln -sf /etc/nginx/sites-available/highscores-api /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo systemctl restart nginx

            # Verify deployment
            sleep 5
            sudo systemctl status highscores-api
            curl -s localhost:3000 || echo "Service check failed"
          ENDSSH