name: Ruby Rails Test, Build, & Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test-server:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.5  # Match EC2 Ruby version

      - name: Run Tests
        run: |
          cd highscores-api || { echo "directory 'highscores-api' not found!"; exit 1; }
          bundle install
          bundle exec rspec

  deploy:
    needs: build-and-test-server
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/github_actions_key
          chmod 600 ~/.ssh/github_actions_key
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
        run: |
          ssh -i ~/.ssh/github_actions_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "RAILS_MASTER_KEY='$RAILS_MASTER_KEY' bash -s" << 'ENDSSH'
            set -e

            # Setup app directory
            APP_DIR="$HOME/app/Project-2025/highscores-api"
            mkdir -p "$APP_DIR"
            cd "$HOME/app"

            if [ -d "Project-2025" ]; then
              cd Project-2025
              git fetch
              git reset --hard origin/main
            else
              git clone https://github.com/Team9NCI/Project-2025.git
              cd Project-2025
            fi

            cd highscores-api
            echo "Current directory: $(pwd)"

            # System dependencies
            sudo apt update -y
            sudo apt install -y build-essential libssl-dev libsqlite3-dev nodejs

            # RVM installation
            if ! command -v rvm &>/dev/null; then
              gpg --keyserver keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
              curl -sSL https://get.rvm.io | bash -s stable
            fi

            source ~/.rvm/scripts/rvm
            rvm install 3.3.5 --quiet-curl
            rvm use 3.3.5 --default

            # Rails setup
            mkdir -p config db log tmp/pids
            echo "$RAILS_MASTER_KEY" > config/master.key
            chmod 600 config/master.key

            bundle install --jobs=4 --retry=3
            RAILS_ENV=production bundle exec rails db:migrate

            # Systemd service
            sudo tee /etc/systemd/system/highscores-api.service > /dev/null <<EOL
            [Unit]
            Description=Highscores Rails API
            After=network.target

            [Service]
            Type=simple
            User=$USER
            WorkingDirectory=$APP_DIR
            ExecStart=$HOME/.rvm/bin/rvm 3.3.5 do bundle exec rails server -e production -p 3000 -b 0.0.0.0
            Restart=always
            Environment=RAILS_ENV=production
            Environment=RAILS_MASTER_KEY=$RAILS_MASTER_KEY

            [Install]
            WantedBy=multi-user.target
            EOL

            # Service management
            sudo systemctl daemon-reload
            sudo systemctl enable highscores-api
            sudo systemctl restart highscores-api

            # Nginx configuration
            sudo tee /etc/nginx/sites-available/highscores-api > /dev/null <<EOL
            server {
                listen 80;
                server_name _;

                location / {
                    proxy_pass http://localhost:3000;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                }
            }
            EOL

            sudo ln -sf /etc/nginx/sites-available/highscores-api /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo systemctl restart nginx
          ENDSSH