name: Rails API Test, Build, & Deploy

on:
  push:
    branches: [ "main", "dev", "testing", "demo"]
  pull_request:
    branches: [ "main", "dev", "testing", "demo" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.5
          bundler-cache: true

      - name: Run Tests
        run: |
          bundle install
          bundle exec rails db:create db:migrate RAILS_ENV=test
          bundle exec rails test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/github_actions_key
          chmod 600 ~/.ssh/github_actions_key
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Increase SSH timeout
        run: |
          echo "ServerAliveInterval 60" >> ~/.ssh/config
          echo "ServerAliveCountMax 120" >> ~/.ssh/config

      - name: Deploy to EC2
        env:
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
        run: |
          ssh -i ~/.ssh/github_actions_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
            # using set +e to continue even if some commands fail
            set +e
          
            # Setup app directory
            mkdir -p ~/app
            cd ~/app
          
            # ensure the repository exists, or clone it
            if [ -d "highscore-api" ]; then
              cd highscore-api
              git fetch
              git reset --hard origin/main
            else
              git clone https://github.com/${{ github.repository }}.git highscore-api
              cd highscore-api
            fi
          
            # Install system dependencies
            echo "installing system dependencies..."
            sudo apt update -y
            sudo apt install -y build-essential git curl libssl-dev libreadline-dev 
            sudo apt install -y zlib1g-dev sqlite3 libsqlite3-dev 
            sudo apt install -y autoconf bison libyaml-dev libgdbm-dev libncurses5-dev automake libtool
            sudo apt install -y libffi-dev nodejs npm libxml2-dev libxslt1-dev
          
            # Check ruby installation
            source ~/.rvm/scripts/rvm
            rvm get stable --auto-dotfiles || true
            rvm reload
          
            # Check if Ruby 3.3.5 is already installed
            if ! rvm list | grep -q '3.3.5'; then
              echo "Ruby 3.3.5 not found. Installing it..."
              rvm install 3.3.5
            else
              echo "Ruby 3.3.5 is already installed."
            fi
          
            # Use Ruby 3.3.5 and set as default
            rvm use 3.3.5 --default
            ruby -v
          
            # set the master key
            echo "setting up master key..."
            mkdir -p config
            echo "${RAILS_MASTER_KEY}" > config/master.key
            chmod 600 config/master.key
          
            # create needed directories
            mkdir -p db log tmp/pids storage
            chmod -R 755 .
          
            # Make startup script executable
            chmod +x scripts/start_server.sh
          
            # install gems
            echo "installing project dependencies..."
            gem install bundler
            bundle install --jobs=4 --retry=3 || (echo "Bundle install failed, trying again..." && bundle install)
          
            # run migrations
            echo "running database migrations"
            RAILS_ENV=production bundle exec rails db:migrate || echo "Migration failed but continuing"
          
            # Set up nginx
            echo "Setting up nginx..."
            sudo apt install -y nginx
            sudo cp config/nginx/highscore-api.conf /etc/nginx/sites-available/
            sudo ln -sf /etc/nginx/sites-available/highscore-api.conf /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo systemctl restart nginx
          
            # create systemd service
            echo "Setting up systemd service..."
            sudo cp config/systemd/highscore-api.service /etc/systemd/system/
          
            # create log files
            sudo touch /var/log/highscore-api.log
            sudo touch /var/log/highscore-api.error.log
            sudo chown $USER:$USER /var/log/highscore-api.*
          
            # reload systemd
            echo "reloading systemd..."
            sudo systemctl daemon-reload
          
            # enable and start the service
            echo "enabling service..."
            sudo systemctl enable highscore-api
          
            echo "starting service..."
            sudo systemctl restart highscore-api
            sleep 5
            sudo systemctl status highscore-api || true
          
            echo "deployment process completed"
          ENDSSH