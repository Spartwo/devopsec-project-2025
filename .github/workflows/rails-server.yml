name: Rails Production Deployment Pipeline

on:
  push:
    branches: [main]

env:
  RAILS_ENV: production
  RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.5
          bundler-cache: true
          working-directory: ./highscores-api

      - name: Database Setup
        working-directory: ./highscores-api
        run: |
          mkdir -p storage
          touch storage/test.sqlite3
          chmod 0666 storage/test.sqlite3
          RAILS_ENV=test bundle exec rails db:create db:migrate

      - name: Run Tests
        working-directory: ./highscores-api
        run: bundle exec rspec

  deploy:
    needs: [build-and-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure SSH Access
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/github_actions
          chmod 600 ~/.ssh/github_actions
          ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
        run: |
          ssh -i ~/.ssh/github_actions ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "RAILS_MASTER_KEY='$RAILS_MASTER_KEY' bash -s" << 'ENDSSH'
            set -euo pipefail

            # Application configuration
            APP_DIR="$HOME/app/Project-2025/highscores-api"
            REPO_URL="https://github.com/Team9NCI/Project-2025.git"

            # Handle existing deployment
            if [ -d "$APP_DIR" ]; then
              echo "Existing deployment found - cleaning..."
              cd "$APP_DIR"
          
              if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
                echo "Valid Git repository - updating..."
                git reset --hard HEAD
                git clean -fd
                git pull origin main
              else
                echo "Invalid repository - redeploying..."
                cd ..
                rm -rf "$APP_DIR"
                git clone "$REPO_URL" "$APP_DIR"
              fi
            else
              echo "First-time deployment..."
              git clone "$REPO_URL" "$APP_DIR"
            fi

            cd "$APP_DIR/highscores-api"

            # Install system dependencies
            sudo apt-get update -y
            sudo apt-get install -y \
              build-essential \
              sqlite3 \
              libsqlite3-dev \
              nodejs \
              nginx \
              curl \
              gnupg2

            # Install RVM securely
            if ! command -v rvm &> /dev/null; then
              echo "Installing RVM..."
              gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
              \curl -sSL https://get.rvm.io | bash -s stable --version 1.29.12
            fi

            # Load RVM properly
            export rvm_path="$HOME/.rvm"
            source "$HOME/.rvm/scripts/rvm" || source /etc/profile.d/rvm.sh

            # Install Ruby
            rvm install 3.3.5 --quiet-curl
            rvm use 3.3.5 --default

            # Configure database
            cat > config/database.yml <<EOL
            default: &default
              adapter: sqlite3
              pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
              timeout: 5000

            development:
              <<: *default
              database: storage/development.sqlite3

            test:
              <<: *default
              database: storage/test.sqlite3

            production:
              <<: *default
              database: $APP_DIR/highscores-api/storage/production.sqlite3
            EOL

            # Set up storage directory
            mkdir -p storage
            touch storage/production.sqlite3
            chmod 0666 storage/production.sqlite3
            sudo chown -R $USER:$USER storage

            # Configure credentials
            printf '%s' "$RAILS_MASTER_KEY" > config/master.key
            chmod 600 config/master.key

            # Install gems
            bundle config set --local without 'development test'
            bundle install --jobs=4 --retry=3

            # Database setup
            RAILS_ENV=production bundle exec rails db:create
            RAILS_ENV=production bundle exec rails db:migrate --trace

            # Configure systemd service
            sudo tee /etc/systemd/system/highscores-api.service > /dev/null <<EOL
            [Unit]
            Description=Highscores API Service
            After=network.target

            [Service]
            Type=simple
            User=$USER
            WorkingDirectory=$APP_DIR/highscores-api
            ExecStart=$HOME/.rvm/bin/rvm 3.3.5 do bundle exec rails server -e production -p 3000 -b 0.0.0.0
            Restart=always
            Environment=RAILS_ENV=production
            Environment=RAILS_MASTER_KEY=$RAILS_MASTER_KEY

            [Install]
            WantedBy=multi-user.target
            EOL

            # Enable service
            sudo systemctl daemon-reload
            sudo systemctl enable highscores-api
            sudo systemctl restart highscores-api

            # Configure nginx
            sudo tee /etc/nginx/sites-available/highscores-api > /dev/null <<EOL
            server {
                listen 80;
                server_name _;

                location / {
                    proxy_pass http://localhost:3000;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOL

            sudo ln -sf /etc/nginx/sites-available/highscores-api /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo systemctl restart nginx

            # Verify deployment
            echo "Deployment verification:"
            sleep 5
            sudo systemctl status highscores-api --no-pager
            curl -sI localhost:3000 | head -n1
            sqlite3 storage/production.sqlite3 ".tables"
          ENDSSH